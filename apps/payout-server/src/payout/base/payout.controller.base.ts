/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PayoutService } from "../payout.service";
import { PayoutCreateInput } from "./PayoutCreateInput";
import { Payout } from "./Payout";
import { PayoutFindManyArgs } from "./PayoutFindManyArgs";
import { PayoutWhereUniqueInput } from "./PayoutWhereUniqueInput";
import { PayoutUpdateInput } from "./PayoutUpdateInput";

export class PayoutControllerBase {
  constructor(protected readonly service: PayoutService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Payout })
  async createPayout(@common.Body() data: PayoutCreateInput): Promise<Payout> {
    return await this.service.createPayout({
      data: data,
      select: {
        amount: true,
        createdAt: true,
        currency: true,
        id: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Payout] })
  @ApiNestedQuery(PayoutFindManyArgs)
  async payouts(@common.Req() request: Request): Promise<Payout[]> {
    const args = plainToClass(PayoutFindManyArgs, request.query);
    return this.service.payouts({
      ...args,
      select: {
        amount: true,
        createdAt: true,
        currency: true,
        id: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Payout })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async payout(
    @common.Param() params: PayoutWhereUniqueInput
  ): Promise<Payout | null> {
    const result = await this.service.payout({
      where: params,
      select: {
        amount: true,
        createdAt: true,
        currency: true,
        id: true,
        status: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Payout })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePayout(
    @common.Param() params: PayoutWhereUniqueInput,
    @common.Body() data: PayoutUpdateInput
  ): Promise<Payout | null> {
    try {
      return await this.service.updatePayout({
        where: params,
        data: data,
        select: {
          amount: true,
          createdAt: true,
          currency: true,
          id: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Payout })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePayout(
    @common.Param() params: PayoutWhereUniqueInput
  ): Promise<Payout | null> {
    try {
      return await this.service.deletePayout({
        where: params,
        select: {
          amount: true,
          createdAt: true,
          currency: true,
          id: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
