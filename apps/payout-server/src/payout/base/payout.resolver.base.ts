/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Payout } from "./Payout";
import { PayoutCountArgs } from "./PayoutCountArgs";
import { PayoutFindManyArgs } from "./PayoutFindManyArgs";
import { PayoutFindUniqueArgs } from "./PayoutFindUniqueArgs";
import { CreatePayoutArgs } from "./CreatePayoutArgs";
import { UpdatePayoutArgs } from "./UpdatePayoutArgs";
import { DeletePayoutArgs } from "./DeletePayoutArgs";
import { PayoutService } from "../payout.service";
@graphql.Resolver(() => Payout)
export class PayoutResolverBase {
  constructor(protected readonly service: PayoutService) {}

  async _payoutsMeta(
    @graphql.Args() args: PayoutCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Payout])
  async payouts(@graphql.Args() args: PayoutFindManyArgs): Promise<Payout[]> {
    return this.service.payouts(args);
  }

  @graphql.Query(() => Payout, { nullable: true })
  async payout(
    @graphql.Args() args: PayoutFindUniqueArgs
  ): Promise<Payout | null> {
    const result = await this.service.payout(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Payout)
  async createPayout(@graphql.Args() args: CreatePayoutArgs): Promise<Payout> {
    return await this.service.createPayout({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Payout)
  async updatePayout(
    @graphql.Args() args: UpdatePayoutArgs
  ): Promise<Payout | null> {
    try {
      return await this.service.updatePayout({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Payout)
  async deletePayout(
    @graphql.Args() args: DeletePayoutArgs
  ): Promise<Payout | null> {
    try {
      return await this.service.deletePayout(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
